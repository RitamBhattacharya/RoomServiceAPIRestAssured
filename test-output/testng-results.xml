<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="16" passed="12" failed="4" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-08-12T18:02:46 IST" name="RoomService API Suite" finished-at="2025-08-12T18:02:54 IST" duration-ms="8737">
    <groups>
    </groups>
    <test started-at="2025-08-12T18:02:46 IST" name="RoomService API Tests" finished-at="2025-08-12T18:02:54 IST" duration-ms="8737">
      <class name="tests.GetRequestsTests">
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.GetRequestsTests@15888343]" started-at="2025-08-12T18:02:48 IST" name="beforeMethod" finished-at="2025-08-12T18:02:48 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.GetRequestsTests.viewRoomById()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="viewRoomById()[pri:0, instance:tests.GetRequestsTests@15888343]" started-at="2025-08-12T18:02:48 IST" name="viewRoomById" finished-at="2025-08-12T18:02:49 IST" duration-ms="448" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- viewRoomById -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.GetRequestsTests@15888343]" started-at="2025-08-12T18:02:49 IST" name="afterMethod" finished-at="2025-08-12T18:02:49 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=viewRoomById status=SUCCESS method=GetRequestsTests.viewRoomById()[pri:0, instance:tests.GetRequestsTests@15888343] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.GetRequestsTests@15888343]" started-at="2025-08-12T18:02:49 IST" name="beforeMethod" finished-at="2025-08-12T18:02:49 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.GetRequestsTests.viewRoomByInvalidId()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="viewRoomByInvalidId()[pri:0, instance:tests.GetRequestsTests@15888343]" started-at="2025-08-12T18:02:49 IST" name="viewRoomByInvalidId" finished-at="2025-08-12T18:02:49 IST" duration-ms="187" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- viewRoomByInvalidId -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.GetRequestsTests@15888343]" started-at="2025-08-12T18:02:49 IST" name="afterMethod" finished-at="2025-08-12T18:02:49 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=viewRoomByInvalidId status=SUCCESS method=GetRequestsTests.viewRoomByInvalidId()[pri:0, instance:tests.GetRequestsTests@15888343] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.GetRequestsTests@15888343]" started-at="2025-08-12T18:02:49 IST" name="beforeMethod" finished-at="2025-08-12T18:02:49 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.GetRequestsTests.viewRoomByInvalidType()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="viewRoomByInvalidType()[pri:0, instance:tests.GetRequestsTests@15888343]" started-at="2025-08-12T18:02:49 IST" name="viewRoomByInvalidType" finished-at="2025-08-12T18:02:49 IST" duration-ms="371" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[API returned 200 OK with empty list for invalid room type.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: API returned 200 OK with empty list for invalid room type.
at org.testng.Assert.fail(Assert.java:111)
at tests.GetRequestsTests.viewRoomByInvalidType(GetRequestsTests.java:124)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- viewRoomByInvalidType -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.GetRequestsTests@15888343]" started-at="2025-08-12T18:02:49 IST" name="afterMethod" finished-at="2025-08-12T18:02:49 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=viewRoomByInvalidType status=FAILURE method=GetRequestsTests.viewRoomByInvalidType()[pri:0, instance:tests.GetRequestsTests@15888343] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.GetRequestsTests@15888343]" started-at="2025-08-12T18:02:49 IST" name="beforeMethod" finished-at="2025-08-12T18:02:49 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.GetRequestsTests.viewRoomByType()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="viewRoomByType()[pri:0, instance:tests.GetRequestsTests@15888343]" started-at="2025-08-12T18:02:49 IST" name="viewRoomByType" finished-at="2025-08-12T18:02:50 IST" duration-ms="185" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- viewRoomByType -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.GetRequestsTests@15888343]" started-at="2025-08-12T18:02:50 IST" name="afterMethod" finished-at="2025-08-12T18:02:50 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=viewRoomByType status=SUCCESS method=GetRequestsTests.viewRoomByType()[pri:0, instance:tests.GetRequestsTests@15888343] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.GetRequestsTests@15888343]" started-at="2025-08-12T18:02:50 IST" name="beforeMethod" finished-at="2025-08-12T18:02:50 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.GetRequestsTests.viewRoomList()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="viewRoomList()[pri:0, instance:tests.GetRequestsTests@15888343]" started-at="2025-08-12T18:02:50 IST" name="viewRoomList" finished-at="2025-08-12T18:02:50 IST" duration-ms="199" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- viewRoomList -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.GetRequestsTests@15888343]" started-at="2025-08-12T18:02:50 IST" name="afterMethod" finished-at="2025-08-12T18:02:50 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=viewRoomList status=SUCCESS method=GetRequestsTests.viewRoomList()[pri:0, instance:tests.GetRequestsTests@15888343] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- tests.GetRequestsTests -->
      <class name="tests.UpdateRoomTest">
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.UpdateRoomTest@14fc5f04]" started-at="2025-08-12T18:02:54 IST" name="beforeMethod" finished-at="2025-08-12T18:02:54 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.UpdateRoomTest.updateRoomPrice()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="updateRoomPrice()[pri:0, instance:tests.UpdateRoomTest@14fc5f04]" started-at="2025-08-12T18:02:54 IST" name="updateRoomPrice" finished-at="2025-08-12T18:02:54 IST" duration-ms="192" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateRoomPrice -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.UpdateRoomTest@14fc5f04]" started-at="2025-08-12T18:02:54 IST" name="afterMethod" finished-at="2025-08-12T18:02:54 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateRoomPrice status=SUCCESS method=UpdateRoomTest.updateRoomPrice()[pri:0, instance:tests.UpdateRoomTest@14fc5f04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.UpdateRoomTest@14fc5f04]" started-at="2025-08-12T18:02:54 IST" name="beforeMethod" finished-at="2025-08-12T18:02:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.UpdateRoomTest.updateRoomPriceInvalidId()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="updateRoomPriceInvalidId()[pri:0, instance:tests.UpdateRoomTest@14fc5f04]" started-at="2025-08-12T18:02:54 IST" name="updateRoomPriceInvalidId" finished-at="2025-08-12T18:02:54 IST" duration-ms="207" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code (<404> or <204>) but was <200>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code (<404> or <204>) but was <200>.

at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:67)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:483)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:73)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrapNoCoerce.callConstructor(ConstructorSite.java:108)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:512)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:696)
at io.restassured.internal.ResponseSpecificationImpl.this$2$validateResponseIfRequired(ResponseSpecificationImpl.groovy)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:198)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:62)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:135)
at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:84)
at tests.UpdateRoomTest.updateRoomPriceInvalidId(UpdateRoomTest.java:58)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateRoomPriceInvalidId -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.UpdateRoomTest@14fc5f04]" started-at="2025-08-12T18:02:54 IST" name="afterMethod" finished-at="2025-08-12T18:02:54 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateRoomPriceInvalidId status=FAILURE method=UpdateRoomTest.updateRoomPriceInvalidId()[pri:0, instance:tests.UpdateRoomTest@14fc5f04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- tests.UpdateRoomTest -->
      <class name="tests.DeleteRoomTest">
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.DeleteRoomTest@6e2829c7]" started-at="2025-08-12T18:02:54 IST" name="beforeMethod" finished-at="2025-08-12T18:02:54 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.DeleteRoomTest.deleteRoom()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="deleteRoom()[pri:0, instance:tests.DeleteRoomTest@6e2829c7]" started-at="2025-08-12T18:02:54 IST" name="deleteRoom" finished-at="2025-08-12T18:02:54 IST" duration-ms="187" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteRoom -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.DeleteRoomTest@6e2829c7]" started-at="2025-08-12T18:02:54 IST" name="afterMethod" finished-at="2025-08-12T18:02:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=deleteRoom status=SUCCESS method=DeleteRoomTest.deleteRoom()[pri:0, instance:tests.DeleteRoomTest@6e2829c7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.DeleteRoomTest@6e2829c7]" started-at="2025-08-12T18:02:54 IST" name="beforeMethod" finished-at="2025-08-12T18:02:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.DeleteRoomTest.testDeleteRoomNegative()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testDeleteRoomNegative()[pri:0, instance:tests.DeleteRoomTest@6e2829c7]" started-at="2025-08-12T18:02:54 IST" name="testDeleteRoomNegative" finished-at="2025-08-12T18:02:54 IST" duration-ms="157" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code (<404> or <204>) but was <200>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code (<404> or <204>) but was <200>.

at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:67)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:483)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:73)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrapNoCoerce.callConstructor(ConstructorSite.java:108)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:512)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:696)
at io.restassured.internal.ResponseSpecificationImpl.this$2$validateResponseIfRequired(ResponseSpecificationImpl.groovy)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:198)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:62)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:135)
at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:84)
at tests.DeleteRoomTest.testDeleteRoomNegative(DeleteRoomTest.java:35)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeleteRoomNegative -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.DeleteRoomTest@6e2829c7]" started-at="2025-08-12T18:02:54 IST" name="afterMethod" finished-at="2025-08-12T18:02:54 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testDeleteRoomNegative status=FAILURE method=DeleteRoomTest.testDeleteRoomNegative()[pri:0, instance:tests.DeleteRoomTest@6e2829c7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- tests.DeleteRoomTest -->
      <class name="tests.AuthTests">
        <test-method is-config="true" signature="beforeSuite()[pri:0, instance:tests.AuthTests@5fb759d6]" started-at="2025-08-12T18:02:45 IST" name="beforeSuite" finished-at="2025-08-12T18:02:46 IST" duration-ms="561" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.AuthTests@5fb759d6]" started-at="2025-08-12T18:02:46 IST" name="beforeMethod" finished-at="2025-08-12T18:02:46 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.AuthTests.testAuthFlow()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testAuthFlow()[pri:0, instance:tests.AuthTests@5fb759d6]" started-at="2025-08-12T18:02:46 IST" name="testAuthFlow" finished-at="2025-08-12T18:02:48 IST" duration-ms="2514" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAuthFlow -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.AuthTests@5fb759d6]" started-at="2025-08-12T18:02:48 IST" name="afterMethod" finished-at="2025-08-12T18:02:48 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testAuthFlow status=SUCCESS method=AuthTests.testAuthFlow()[pri:0, instance:tests.AuthTests@5fb759d6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterSuite()[pri:0, instance:tests.AuthTests@5fb759d6]" started-at="2025-08-12T18:02:55 IST" name="afterSuite" finished-at="2025-08-12T18:02:55 IST" duration-ms="250" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
      </class> <!-- tests.AuthTests -->
      <class name="tests.AddRoomTest">
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.AddRoomTest@33ecda92]" started-at="2025-08-12T18:02:50 IST" name="beforeMethod" finished-at="2025-08-12T18:02:50 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.AddRoomTest.addMultipleRoom(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="addMultipleRoom(java.util.Map)[pri:0, instance:tests.AddRoomTest@33ecda92]" started-at="2025-08-12T18:02:50 IST" name="addMultipleRoom" data-provider="roomData" finished-at="2025-08-12T18:02:50 IST" duration-ms="653" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{roomId=11, hotelId=1001a, roomType=SINGLE, roomStatus=AVAILABLE, roomPrice=20000}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addMultipleRoom -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.AddRoomTest@33ecda92]" started-at="2025-08-12T18:02:50 IST" name="afterMethod" finished-at="2025-08-12T18:02:50 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=addMultipleRoom status=SUCCESS method=AddRoomTest.addMultipleRoom(java.util.Map)[pri:0, instance:tests.AddRoomTest@33ecda92] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.AddRoomTest@33ecda92]" started-at="2025-08-12T18:02:50 IST" name="beforeMethod" finished-at="2025-08-12T18:02:50 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.AddRoomTest.addMultipleRoom(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="addMultipleRoom(java.util.Map)[pri:0, instance:tests.AddRoomTest@33ecda92]" started-at="2025-08-12T18:02:51 IST" name="addMultipleRoom" data-provider="roomData" finished-at="2025-08-12T18:02:51 IST" duration-ms="610" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{roomId=12, hotelId=1002b, roomType=DOUBLE, roomStatus=AVAILABLE, roomPrice=35000}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addMultipleRoom -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.AddRoomTest@33ecda92]" started-at="2025-08-12T18:02:51 IST" name="afterMethod" finished-at="2025-08-12T18:02:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=addMultipleRoom status=SUCCESS method=AddRoomTest.addMultipleRoom(java.util.Map)[pri:0, instance:tests.AddRoomTest@33ecda92] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.AddRoomTest@33ecda92]" started-at="2025-08-12T18:02:51 IST" name="beforeMethod" finished-at="2025-08-12T18:02:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.AddRoomTest.addMultipleRoom(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="addMultipleRoom(java.util.Map)[pri:0, instance:tests.AddRoomTest@33ecda92]" started-at="2025-08-12T18:02:51 IST" name="addMultipleRoom" data-provider="roomData" finished-at="2025-08-12T18:02:52 IST" duration-ms="608" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{roomId=13, hotelId=1003c, roomType=SINGLE, roomStatus=NOTAVAILABLE, roomPrice=18000}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addMultipleRoom -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.AddRoomTest@33ecda92]" started-at="2025-08-12T18:02:52 IST" name="afterMethod" finished-at="2025-08-12T18:02:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=addMultipleRoom status=SUCCESS method=AddRoomTest.addMultipleRoom(java.util.Map)[pri:0, instance:tests.AddRoomTest@33ecda92] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.AddRoomTest@33ecda92]" started-at="2025-08-12T18:02:52 IST" name="beforeMethod" finished-at="2025-08-12T18:02:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.AddRoomTest.addMultipleRoom(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="addMultipleRoom(java.util.Map)[pri:0, instance:tests.AddRoomTest@33ecda92]" started-at="2025-08-12T18:02:52 IST" name="addMultipleRoom" data-provider="roomData" finished-at="2025-08-12T18:02:52 IST" duration-ms="715" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{roomId=14, hotelId=1003d, roomType=SINGLE, roomStatus=NA, roomPrice=18000}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code <200> but was <400>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code <200> but was <400>.

at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:67)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:483)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:73)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrapNoCoerce.callConstructor(ConstructorSite.java:108)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:57)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:263)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:512)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:696)
at io.restassured.internal.ResponseSpecificationImpl.this$2$validateResponseIfRequired(ResponseSpecificationImpl.groovy)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:198)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:62)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:135)
at io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:143)
at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)
at tests.AddRoomTest.addMultipleRoom(AddRoomTest.java:70)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addMultipleRoom -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.AddRoomTest@33ecda92]" started-at="2025-08-12T18:02:52 IST" name="afterMethod" finished-at="2025-08-12T18:02:52 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=addMultipleRoom status=FAILURE method=AddRoomTest.addMultipleRoom(java.util.Map)[pri:0, instance:tests.AddRoomTest@33ecda92] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.AddRoomTest@33ecda92]" started-at="2025-08-12T18:02:52 IST" name="beforeMethod" finished-at="2025-08-12T18:02:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.AddRoomTest.addRoom()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="addRoom()[pri:0, instance:tests.AddRoomTest@33ecda92]" started-at="2025-08-12T18:02:52 IST" name="addRoom" finished-at="2025-08-12T18:02:53 IST" duration-ms="596" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addRoom -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.AddRoomTest@33ecda92]" started-at="2025-08-12T18:02:53 IST" name="afterMethod" finished-at="2025-08-12T18:02:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=addRoom status=SUCCESS method=AddRoomTest.addRoom()[pri:0, instance:tests.AddRoomTest@33ecda92] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.AddRoomTest@33ecda92]" started-at="2025-08-12T18:02:53 IST" name="beforeMethod" finished-at="2025-08-12T18:02:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.AddRoomTest.addRoomWithInvalidStatus()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="addRoomWithInvalidStatus()[pri:0, instance:tests.AddRoomTest@33ecda92]" started-at="2025-08-12T18:02:53 IST" name="addRoomWithInvalidStatus" finished-at="2025-08-12T18:02:54 IST" duration-ms="618" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addRoomWithInvalidStatus -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.AddRoomTest@33ecda92]" started-at="2025-08-12T18:02:54 IST" name="afterMethod" finished-at="2025-08-12T18:02:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=addRoomWithInvalidStatus status=SUCCESS method=AddRoomTest.addRoomWithInvalidStatus()[pri:0, instance:tests.AddRoomTest@33ecda92] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- tests.AddRoomTest -->
    </test> <!-- RoomService API Tests -->
  </suite> <!-- RoomService API Suite -->
</testng-results>
